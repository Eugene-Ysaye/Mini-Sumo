//motor a
#define pwma 3
#define aIn1 5
#define aIn2 4
//motor b
#define pwmb 9
#define bIn1 7
#define bIn2 8
//puente h
#define standBy 6
//dirección del motor
bool flow_a;
bool flow_b;

//Sensores de linea
#define lineSensor_a 3
#define lineSensor_b 4
bool isLine_a = false;
bool isLine_b = false;

//Sensores
#define sensorLeft 14 // A0 - 14
#define sensorRight 15 // A1 - 15
#define sensorSide 16 // A2 - 16
//checar side de q lado estara, posiblemente cambiar nombre
float outSensor;
float distanceLeft;
float distanceRight;
float distanceSide;

const int ringDistance = 77;

void setup()
{
  // Motor a
  pinMode(pwma, OUTPUT);
  pinMode(aIn1, OUTPUT);
  pinMode(aIn2, OUTPUT);
  
  //Motor b
  pinMode(pwmb, OUTPUT);
  pinMode(bIn1, OUTPUT);
  pinMode(bIn2, OUTPUT);
  
  //Para indicar al puente h
  pinMode(standBy, OUTPUT);
  
  //Sensores de linea
  pinMode(lineSensor_a, OUTPUT);
  pinMode(lineSensor_a, OUTPUT);
  
  //Sensores de distancia
  pinMode(sensorLeft, OUTPUT);
  pinMode(sensorMiddle, OUTPUT);
  pinMode(sensorRight, OUTPUT);
}

void walk(int pwra, int pwrb)
{
  /* Condicionales para
    determinar dirección de cada motor */

  flow_a = pwra >= 0;
  analogWrite(pwma, flow_a ? pwra : -pwra);
  digitalWrite(aIn1, flow_a ? HIGH : LOW);
  digitalWrite(aIn2, waya ? LOW : HIGH);

  flow_b = pwrb >= 0;
  analogWrite(pwmb, wayb ? pwrb : -pwrb);
  digitalWrite(bIn1, wayb ? HIGH : LOW);
  digitalWrite(bIn1, wayb ? LOW : HIGH);

  digitalWrite(standBy, HIGH);
}

/* ~ Para leer sensor de linea ~
  eye = digitalRead(watcher);
*/

void Turn(String Where){
  if(Where == "LEFT"){
    walk(-100,100)//izq¿¿¿
  }

  else if(Where == "RIGHT"){
    walk(100,-100)//Derecha¿¿
  }
}

void binarySearch(float d_Left, float d_Right, float d_Side){
  isLeft = d_Left < ringDistance;
  isRight = d_Right < ringDistance;
  isSide = d_Side < ringDistance;

  

  if(isLeft && isRight){
    walk(200, 200) //nose q potencia quieran poner
  }

  else{
    Turn(isSide ? "LEFT" : "RIGHT");//1:0 +facil -claro
  }
}

float distanceCm(int sensor)
{
  outSensor = analogRead(sensor);
  return 29.988 * pow(outSensor, -1.173);
  //d internet, checar
}

void loop() {
  distanceLeft = distanceCm(sensorLeft);
  distanceRight = distanceCm(sensorRight);
  distanceSide = distanceCm(sensorSide);
  delay(50);
 
}
